(load "mustache/mustache")

(define (function:info function)
  "gets the information on a function as a hashmap.

  params:
    - function: the function to document
  complexity: O(1)
  returns: a hashmap with the keys <i>name</i>, <i>docs</i>, <i>params</i>, <i>complexity</i>, <i>primitive?</i>, and <i>returns</i>"
  (define (treat-param input info)
    (let ((split (string:split input #\:)))
      (hash:update info
                   "params"
                   ($ (++ %  (make-hash "pname" (string:trim (car split))
                                        "doc" (string:trim
                                                (string:join (cdr split)
                                                             #\:))))))))

  (define (sanitize-params params)
    (let ((saturated (map ($ (% "pname")) params)))
      (++ params
          (|> (if (primitive? function) [] (function:args function))
              (curry filter ($ (not (in? saturated %))))
              (curry map ($ (make-hash "pname" %
                                       "doc" "No documentation")))))))

  (define (treat-params input info)
    (let loop ((input input)
               (info info))
      (let ((first (string:trim (car input))))
        (if (string:starts-with first "-")
          (loop (cdr input) (treat-param (cdr first) info))
          (make-hash :info info :rest input)))))

  (define (treat-regular input info)
    (let* ((split (string:split (car input) #\:))
           (key   (string:trim (car split)))
           (val   (string:trim (string:join (cdr split) #\:))))
      (make-hash :info (hash:set info key val)
                 :rest (cdr input))))


  (let* ((doc   (if (primitive? function)
                  (help (function:name function))
                  (function:docstring function)))
         (input (string:split doc "\n\n"))
         (info (make-hash "params" (sanitize-params [])
                          "complexity" "N.A."
                          "returns" "N.A."
                          "primitive?" (primitive? function)
                          "name" (function:name function))))
    (if (eq? (length input) 1)
      (hash:set info "docs" (car input))
      (let loop ((input (string:split (list:last input) #\newline))
                 (info (hash:set info "docs" (string:join (list:but-last input) "\n\n"))))
        (if (null? input)
          (hash:update info "params" sanitize-params)
          (let ((parse (string:trim (car input))))
            (if (string:starts-with parse "params:")
              (let ((parsed (treat-params (cdr input) info)))
                (loop (parsed :rest) (parsed :info)))
              (let ((parsed (treat-regular input info)))
                (loop (parsed :rest) (parsed :info))))))))))

(define (function:render functions name description)
  "Renders a list of functions.

  params:
    - functions: a list of functions to render
    - name: the name of the rendered output
    - description: the description of the rendered output
  complexity: O(n)
  returns: the template value"
  (let ((template (read-contents "partial.zms")))
    ((import "mustache:template") template
        (make-hash "name" name
                   "description" description
                   "elements" (make-hash "namespace" name "contents" functions)))))

(define (function:render-all)
  "Renders all the function defined in the global environment

   params:
   complexity: O(n) (where n is the number of definitions)
   returns: the templated string"
  (function:render-all-in *global-env*))

(define (function:render-all-in env)
  "Renders all the function defined in the given environment

   params:
     - env: the environment to render
   complexity: O(n) (where n is the number of definitions)
   returns: the templated string"
  (let ((global (env->hashmap env))
        (filter-fun ($ (and (callable? %)
                            (not (eq? "lambda" (function:name %)))
                            (or (primitive? %)
                                (not (eq? "do not expose" (function:docstring %))))))))
    (function:render (map function:info
                          (hash:values-filter filter-fun global))
                     "global"
                     "The documentation of the global environment")))
